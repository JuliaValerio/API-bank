{"ast":null,"code":"import _slicedToArray from \"/home/xulia/Desktop/API-bank/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/xulia/Desktop/API-bank/src/pages/AddUser/index.js\";\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport api from '../../services/api';\nimport './style.css';\n\nconst MyForm = () => {\n  const _useFormik = useFormik({\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      cpf: \"\"\n    },\n    validate: values => {\n      const err = {\n        name: \"\",\n        email: \"\",\n        cpf: \"\"\n      };\n      const message = \"Campo obrigatório\";\n      if (!values.name) err.name = message;\n      if (!values.email) err.email = message;\n      if (!values.cpf) err.cpf = message;\n      return err;\n    },\n    onSubmit: (response, error) => {\n      api.post('/user', {\n        firstName: 'Fred',\n        lastName: 'Flintstone'\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }),\n        getFieldProps = _useFormik.getFieldProps,\n        handleSubmit = _useFormik.handleSubmit,\n        errors = _useFormik.errors,\n        touched = _useFormik.touched;\n\n  const _getFieldProps = getFieldProps(\"name\", \"text\"),\n        _getFieldProps2 = _slicedToArray(_getFieldProps, 2),\n        name = _getFieldProps2[0],\n        metadataName = _getFieldProps2[1];\n\n  const _getFieldProps3 = getFieldProps(\"email\", \"text\"),\n        _getFieldProps4 = _slicedToArray(_getFieldProps3, 2),\n        email = _getFieldProps4[0],\n        metadataEmail = _getFieldProps4[1];\n\n  const _getFieldProps5 = getFieldProps(\"cpf\", \"text\"),\n        _getFieldProps6 = _slicedToArray(_getFieldProps5, 2),\n        cpf = _getFieldProps6[0],\n        metadatacpf = _getFieldProps6[1];\n\n  console.log({\n    errors,\n    touched\n  });\n  return React.createElement(\"div\", {\n    className: \"form-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    class: \"form-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Fa\\xE7a um novo cadastro :)\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Nome: \"), React.createElement(\"input\", Object.assign({\n    placeholder: \"Seu nome\"\n  }, name, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), metadataName.touch && metadataName.error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, metadataName.error)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Email: \"), React.createElement(\"input\", Object.assign({\n    placeholder: \"Seu email\"\n  }, email, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), metadataEmail.touch && metadataEmail.error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, metadataEmail.error)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"CPF: \"), React.createElement(\"input\", Object.assign({\n    placeholder: \"Seu CPF\"\n  }, cpf, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), metadatacpf.touch && metadatacpf.error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, metadatacpf.error)), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Enviar\")), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, JSON.stringify({\n    name,\n    email,\n    cpf\n  }, 2, 2)));\n};\n\nexport default MyForm;","map":{"version":3,"sources":["/home/xulia/Desktop/API-bank/src/pages/AddUser/index.js"],"names":["React","useFormik","api","MyForm","initialValues","name","email","cpf","validate","values","err","message","onSubmit","response","error","post","firstName","lastName","then","console","log","catch","getFieldProps","handleSubmit","errors","touched","metadataName","metadataEmail","metadatacpf","touch","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useFormik } from \"formik\";\nimport api from '../../services/api';\nimport './style.css'\n\nconst MyForm = () => {\n  const { getFieldProps, handleSubmit, errors, touched } = useFormik({\n    initialValues: {\n      \n        name: \"\",\n        email: \"\",\n        cpf: \"\"\n      \n    },\n    validate: values => {\n      const err = {\n      \n        name: \"\",\n        email: \"\",\n        cpf: \"\"\n      };\n      const message = \"Campo obrigatório\";\n      if (!values.name) err.name = message;\n      if (!values.email) err.email = message;\n      if (!values.cpf) err.cpf = message;\n      \n\n      return err;\n    },\n    onSubmit: (response, error) => {\n        api.post('/user', {\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n          })\n          .then(function (response) {\n            console.log(response);\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n    }\n  });\n\n  const [name, metadataName] = getFieldProps(\"name\", \"text\");\n  const [email, metadataEmail] = getFieldProps(\"email\", \"text\");\n  const [cpf, metadatacpf] = getFieldProps(\"cpf\", \"text\");\n  console.log({ errors, touched });\n  return (\n    <div className=\"form-list\">\n      <form onSubmit={handleSubmit}>\n      <span class=\"form-title\">\n        Faça um novo cadastro :)\n        </span>\n        <div>\n          <label>Nome: </label>\n          <input placeholder=\"Seu nome\" {...name} />\n          {metadataName.touch && metadataName.error && (\n            <span>{metadataName.error}</span>\n          )}\n        </div>\n        <div>\n          <label>Email: </label>\n          <input placeholder=\"Seu email\" {...email} />\n          {metadataEmail.touch && metadataEmail.error && (\n            <span>{metadataEmail.error}</span>\n          )}\n        </div>\n        <div>\n          <label>CPF: </label>\n          <input placeholder=\"Seu CPF\" {...cpf} />\n          {metadatacpf.touch && metadatacpf.error && (\n            <span>{metadatacpf.error}</span>\n          )}\n        </div>\n        <button type=\"submit\">Enviar</button>\n      </form>\n      <pre>{JSON.stringify({ name, email, cpf }, 2, 2)}</pre>\n    </div>\n  );\n};\n\nexport default MyForm;\n"]},"metadata":{},"sourceType":"module"}